/* calculates https://en.wikipedia.org/wiki/Ackermann_function of (a, b) */
int ackermann(int a, int b) begin
    if (a == 0)
        return b + 1
    if (b == 0)
        return ackermann(a - 1, 1)
    return ackermann(a - 1, ackermann(a, b - 1))
end

/* checks if a given point is inside a given square with size x&y */
bool is_inbound(int x, int y, int sizex, int sizey)
    return (x > -1) & (y > -1) & (x < sizex) & (y < sizey)

/* returns number of alive neighbours for given point(x, y) */
int count_neighbours(list# list# bool state, int x, int y) begin
    int ysize = size(state)
    int xsize = size(state[0])
    int result = 0

    int i = -1

    while (i < 2) begin
        int j = -1
        while (j < 2) begin
            if (~((i == 0) & (j==0)) & is_inbound(x+j, y+i, sizex, sizey)) & state[y+i][x+j]
                result = result + 1
            j = j + 1
        end
        i = i + 1
    end

    return result
end

/* given a state in the https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life returns next state */
list# list# bool next_state(list# list# bool prev) begin
    int sizey = size(prev)
    int sizex = size(prev[0])

    list# list# bool next;

    int i = 0
    while (i < sizey) begin
        list# int line
        int j = 0
        while (j < sizex) begin
            int n = count_neighbours(prev, j, i)
            if (prev[i][j])
                if (n < 2) | (n > 3)
                    append(line, false)
                else
                    append(line, true)
            else
                if (n == 3)
                    append(line, true)
                else
                    append(line, false)

            j = j + 1
        end
        append(next, line);
        i = i + 1
    end

    return next
end

main() begin
return 2
end